# GitHub Actions workflow: build.yaml
# Builds standalone VirtualElevation binaries on Windows, macOS and Linux.
# NOTE: When you feed PyInstaller an explicit .spec file you **cannot** also pass
# --onefile / --windowed on the CLI. Those modes must be encoded inside the
# spec, or (simpler) you just omit the flags. PyInstaller will honour whatever
# settings are already baked into `ve.spec` (console=False gives you “windowed”).
#
# This workflow therefore calls `pyinstaller ve.spec --clean --noconfirm` and
# leaves the `onefile` discussion to the spec (currently it builds an *onedir*
# bundle per platform – which still gives a double‑clickable `.app` on macOS
# and an `.exe` inside its own folder on Windows). If you really *need* the
# single‑file exe, drop the spec and build via CLI flags instead.

name: Build VE desktop apps

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: PyInstaller ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install runtime requirements + PyInstaller
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.4.*

      - name: Build standalone executable (uses ve.spec)
        run: |
          pyinstaller ve.spec --clean --noconfirm

      # macOS – wrap the .app inside a .dmg (Gatekeeper-friendly)
      - name: Create dmg (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg || true
          create-dmg --overwrite --volname "VirtualElevationRecipes" dist/*.app

      # Linux – convert the output folder to an AppImage
      - name: Package AppImage (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y libfuse2
          wget -q https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          ./appimagetool dist/VirtualElevationRecipes dist/VirtualElevationRecipes.AppImage

      # Zip artefacts for upload – grab the entire built directory or dmg/AppImage
      - name: Archive artefacts
        shell: bash
        run: |
          cd dist
          case "${{ runner.os }}" in
            Windows) zip -r ../VirtualElevationRecipes-${{ runner.os }}.zip VirtualElevationRecipes ;;
            macOS)   zip -r ../VirtualElevationRecipes-${{ runner.os }}.zip *.app *.dmg ;;
            Linux)   zip -r ../VirtualElevationRecipes-${{ runner.os }}.zip VirtualElevationRecipes*.AppImage VirtualElevationRecipes ;;  # include AppImage & fallback folder
          esac

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: VirtualElevationRecipes-${{ runner.os }}
          path: VirtualElevationRecipes-${{ runner.os }}.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          pattern: VirtualElevationRecipes-*
          path: ./dist

      - name: Generate release notes & publish
        id: release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true

      - name: Upload binaries to release
        run: |
          for file in dist/**/*.zip; do
            gh release upload "$GITHUB_REF_NAME" "$file" --clobber;
          done
        env:
          GH_TOKEN: ${{ github.token }}
