# # .github/workflows/build.yaml – resilient packaging on all OSes

name: Build VirtualElevationRecipes desktop apps

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: PyInstaller ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.4.* tomlkit==0.12.*

      - name: Build application using ve.spec
        run: |
          pyinstaller ve.spec --clean --noconfirm

      # ------------------------------ macOS dmg -----------------------------
      - name: Package .app into .dmg (macOS only)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # PyInstaller drops .app inside an onedir bundle: dist/VirtualElevationRecipes/VirtualElevationRecipes.app
          APP_PATH=$(ls -d dist/VirtualElevationRecipes*.app 2>/dev/null || true)
          if [[ -z "$APP_PATH" ]]; then APP_PATH=$(ls -d dist/VirtualElevationRecipes/*.app); fi
          echo "APP_PATH=$APP_PATH"
          DMG_NAME="VirtualElevationRecipes.dmg"
          hdiutil create "$DMG_NAME" -volname "VirtualElevationRecipes" -srcfolder "$APP_PATH" -ov -format UDZO

      # ------------------------------ Linux AppImage ------------------------
      - name: Package AppImage (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y libfuse2
          wget -q https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          BUILD_DIR="dist/VirtualElevationRecipes"
          # Create minimal desktop file for appimagetool
          cat > "$BUILD_DIR/VirtualElevationRecipes.desktop" <<EOF
          [Desktop Entry]
          Type=Application
          Name=VirtualElevationRecipes
          Exec=VirtualElevationRecipes
          Icon=VE_icon
          Categories=Utility;
          EOF
          cp VE_icon.png "$BUILD_DIR/VE_icon.png" || true
          ./appimagetool -n "$BUILD_DIR" "dist/VirtualElevationRecipes.AppImage"

      # ------------------------------ Archive artefacts ---------------------
      # Windows uses PowerShell's Compress‑Archive; mac/Linux use zip utility.
      - name: Zip artefact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "dist/VirtualElevationRecipes/*" -DestinationPath "VirtualElevationRecipes-Windows.zip"

      - name: Zip artefact (macOS & Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd dist
          case "${{ runner.os }}" in
            macOS) zip -r ../VirtualElevationRecipes-macOS.zip *.app *.dmg ;;
            Linux) zip -r ../VirtualElevationRecipes-Linux.zip VirtualElevationRecipes*.AppImage VirtualElevationRecipes ;;
          esac

      - name: Upload build artefact
        uses: actions/upload-artifact@v4
        with:
          name: VirtualElevationRecipes-${{ runner.os }}
          path: |
            *.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          pattern: VirtualElevationRecipes-*
          path: ./dist

      - name: Generate release and upload binaries
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true

      - name: Upload zips to release
        run: |
          for file in dist/**/*.zip; do
            gh release upload "$GITHUB_REF_NAME" "$file" --clobber
          done
        env:
          GH_TOKEN: ${{ github.token }}
