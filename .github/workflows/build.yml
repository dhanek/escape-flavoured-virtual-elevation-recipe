# .github/workflows/build.yaml
name: Build VirtualElevationRecipes desktop apps

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller==6.15.*

      # ---------- SINGLE-LINE BUILD (no .spec) ----------
      - name: Build app with PyInstaller
        shell: bash                   # Windows runner will auto-convert
        run: |
          # pick the right icon for the current OS
          case "${{ runner.os }}" in
            macOS)   ICON=".assets/VirtualElevationRecipes.icns" ;;
            Windows) ICON=".assets/VirtualElevationRecipes.ico"  ;;
            Linux)   ICON="" ;;   # Linux ignores --icon; desktop files set it later
          esac

          # Use onedir for macOS to avoid deprecation warning with .app bundles
          # Use onefile for Windows/Linux for single executable distribution
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            BUNDLE_MODE="--onedir"
          else
            BUNDLE_MODE="--onefile"
          fi

          pyinstaller $BUNDLE_MODE --windowed --clean \
                      ${{ runner.os != 'Windows' && '--strip' || '' }} \
                      --noupx \
                      ${ICON:+--icon="$ICON"} \
                      --name "VirtualElevationRecipes" \
                      --hidden-import=rasterio.sample \
                      --hidden-import=rasterio._io \
                      --hidden-import=rasterio.control \
                      --hidden-import=rasterio.crs \
                      --hidden-import=rasterio.vrt \
                      --hidden-import=rasterio.warp \
                      --hidden-import=rasterio.windows \
                      --hidden-import=rasterio.features \
                      --hidden-import=rasterio.transform \
                      --hidden-import=rasterio.coords \
                      --hidden-import=rasterio.profiles \
                      --hidden-import=rasterio.mask \
                      --hidden-import=rasterio.merge \
                      --hidden-import=rasterio.plot \
                      --hidden-import=rasterio.rio \
                      --hidden-import=rasterio.shutil \
                      --hidden-import=PySide6.QtWebEngineWidgets \
                      --hidden-import=PySide6.QtWebEngineCore \
                      --collect-data=rasterio \
                      --collect-data=pyproj \
                      --collect-data=scipy \
                      main.py

      - name: Smoke-test GUI binary (no CLI flags)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $exe  = Join-Path $PWD 'dist\VirtualElevationRecipes.exe'

          Write-Host "Launching $exe …"
          $p = Start-Process -FilePath $exe -WindowStyle Hidden -PassThru

          Start-Sleep -Seconds 15          # loader usually fails in <½ sec
          if ($p.HasExited) {
              Throw "❌ Binary exited early with code $($p.ExitCode) – loader crash."
          }

          Write-Host "✅ Loader happy; killing the process."
          Stop-Process -Id $p.Id

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: VirtualElevationRecipes-${{ runner.os }}
          path: |
            dist/VirtualElevationRecipes*
            !dist/*.icns
            !dist/*.ico
          retention-days: 5 
          if-no-files-found: error

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          
      - name: Prepare release assets
        run: |
          mkdir -p release_files
          
          # Debug: List downloaded artifacts
          echo "=== All downloaded artifacts ==="
          find dist -type f -o -type d | sort
          echo "=== App bundles ==="
          find dist -name "*.app" -type d | sort
          
          # Process macOS artifacts
          echo "=== Processing macOS artifacts ==="
          find dist -path "*macOS*" | while read item; do
            echo "Processing item: $item"
            if [[ -d "$item" && "$item" == *".app" ]]; then
              echo "Found .app bundle: $item"
              # It's an app bundle directory - zip it
              (cd $(dirname "$item") && zip -r "$(pwd)/release_files/VirtualElevationRecipes-macOS.zip" $(basename "$item"))
            elif [[ -f "$item" && "$item" != *".icns" && "$item" != *".ico" ]]; then
              echo "Found file: $item"
              # It's a binary file, not an icon
              if [[ "$item" == *".app.zip" || "$item" == *".zip" ]]; then
                # Already zipped app bundle
                cp "$item" "release_files/VirtualElevationRecipes-macOS.zip"
              else
                # Single binary file (shouldn't happen with onedir but handle it)
                cp "$item" "release_files/VirtualElevationRecipes-macOS"
              fi
            fi
          done
          
          # Fallback: if no macOS zip was created, look for .app directly
          if [[ ! -f "release_files/VirtualElevationRecipes-macOS.zip" ]]; then
            echo "=== Fallback: Looking for .app bundles directly ==="
            find dist -name "VirtualElevationRecipes.app" -type d | while read app_path; do
              echo "Found app bundle at: $app_path"
              (cd $(dirname "$app_path") && zip -r "$(pwd)/release_files/VirtualElevationRecipes-macOS.zip" $(basename "$app_path"))
              break
            done
          fi
          
          # Process Windows artifacts
          find dist -path "*Windows*" -name "*.exe" | while read item; do
            cp "$item" "release_files/VirtualElevationRecipes-Windows.exe"
          done
          
          # Process Linux artifacts
          find dist -path "*Linux*" -type f | grep -v "\.ico$\|\.icns$" | while read item; do
            cp "$item" "release_files/VirtualElevationRecipes-Linux"
          done
          
          # Debug: List prepared release files
          ls -la release_files/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          generate_release_notes: true